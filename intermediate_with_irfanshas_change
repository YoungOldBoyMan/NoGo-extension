# 1/1 (black/white) Action variables, 2 and 2 (action parameter) index variables (x, y), and game stop variables : 
exists(1, 2, 3, 4, 5, 6)
# There exists winning variables for black
exists(7)
# Number of actions/moves are only 1 - existential white move
forall(8, 9, 10, 11, 12, 17)
# white illegal variable: 
exists(13)
# indicator variables, specifying which position is voilated in illegal move: 
exists(14, 15, 16)
exists(19, 20, 21, 22, 23, 24)
# There exists winning variables for black
exists(25)
# black goal index variables: 
# white goal index and conjunction variables: 
# Forall index variables: 
forall(26, 27, 28, 29)
# Predicate variables: 
exists(30, 31)
exists(32, 33)
exists(34, 35)
exists(36, 37)
output(228)
# ------------------------------------------------------------------------
# Transitions: 
# Player 1 (black) transition function for time step 0: 
# propagation constraints:
38 = or(-30, 32)
39 = or(-32, 30)
40 = and(38, 39)
41 = or(-31, 33)
42 = or(-33, 31)
43 = and(41, 42)
44 = and(40, 43)
# less than constraints for positive index bounds:
45 = and(2, -3)
46 = or(-2, 45)
# less than constraints for positive index bounds:
47 = and(4, -5)
48 = or(-4, 47)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
49 = or(-2, 26)
50 = or(-26, 2)
51 = and(49, 50)
52 = or(-3, 27)
53 = or(-27, 3)
54 = and(52, 53)
55 = and(51, 54)
# new y constraint equality gate with forall y variables: 
56 = or(-4, 28)
57 = or(-28, 4)
58 = and(56, 57)
59 = or(-5, 29)
60 = or(-29, 5)
61 = and(59, 60)
62 = and(58, 61)
63 = and(55, 62)
64 = or(-63, -30)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
65 = and(32, -33)
# if then constraint for black predicate:
66 = or(-63, 65)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
67 = or(63, 44)
# conjunction for all the then constraints:
68 = and(46, 48, 64, 66, 67)
# final if then constraint for current action:
69 = or(1, 68)
# Black win false
# Kommentar
70 = or(1, -7)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '3'] add/sub/none:
# computing y variables for constraints,['1', '3'] add/sub/none:
# x constraint binary format with forall x variables: 
71 = and(-26, -27)
# y constraint binary format with forall y variables: 
72 = and(28, -29)
73 = and(71, 72)
74 = and(30, -31)
# if then constraint for black predicate:
75 = or(-73, 74)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
76 = and(-28, 29)
77 = and(71, 76)
78 = and(30, 31)
# if then constraint for white predicate:
79 = or(-77, 78)
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
80 = and(-26, 27)
# y constraint binary format with forall y variables: 
81 = and(-28, -29)
82 = and(80, 81)
# if then constraint for white predicate:
83 = or(-82, 78)
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
84 = and(80, 76)
# if then constraint for black predicate:
85 = or(-84, 74)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
86 = or(-63, 7)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
87 = and(46, 48, 75, 79, 83, 85, 86, 67)
# final if then constraint for current action:
88 = or(-1, 87)
# Black win true
# Kommentar
89 = or(-1, 7)
90 = and(69, 70, 88, 89)
# Player 2 (white) transition function for time step 1: 
# propagation constraints:
91 = or(-32, 34)
92 = or(-34, 32)
93 = and(91, 92)
94 = or(-33, 35)
95 = or(-35, 33)
96 = and(94, 95)
97 = and(93, 96)
# generating less than bounds for indexes:
# less than constraints for positive index bounds:
98 = and(9, -10)
99 = or(-9, 98)
# less than constraints for positive index bounds:
100 = and(11, -12)
101 = or(-11, 100)
102 = and(99, 101)
103 = or(8, 102)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
104 = or(-8, 102)
# conjunction for all the bound constraints:
105 = and(103, 104)
# single equality gate for the bound boolean variale and the final bound conjuction gate:
106 = or(-13, 105)
107 = or(-105, 13)
108 = and(106, 107)
# generating precondition equalities with boolean variables:
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
109 = or(-9, 26)
110 = or(-26, 9)
111 = and(109, 110)
112 = or(-10, 27)
113 = or(-27, 10)
114 = and(112, 113)
115 = and(111, 114)
# new y constraint equality gate with forall y variables: 
116 = or(-11, 28)
117 = or(-28, 11)
118 = and(116, 117)
119 = or(-12, 29)
120 = or(-29, 12)
121 = and(119, 120)
122 = and(118, 121)
123 = and(115, 122)
124 = or(32, 14)
125 = or(-14, -32)
126 = and(124, 125)
127 = or(8, -123, 126)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
128 = or(-65, 14)
129 = or(-14, 65)
130 = and(128, 129)
131 = or(-8, -77, 130)
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
132 = and(32, 33)
# if then constraint for white predicate:
133 = or(-132, 15)
134 = or(-15, 132)
135 = and(133, 134)
136 = or(-8, -84, 135)
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
137 = or(-65, 16)
138 = or(-16, 65)
139 = and(137, 138)
140 = or(-8, -82, 139)
# generating effects, implcation when the game is not stopped and bounds,preconditions hold:
141 = and(13, 14, 15, 16)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
142 = and(34, 35)
# if then constraint for white predicate:
143 = or(-123, 142)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
144 = or(123, 97)
# det er IKKE forbidden action
145 = and()
146 = and(143, 144, 145)
147 = and(141, -8)
148 = or(-147, 146)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# WW variable
149 = or(-123, 123)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# det er forbidden action
150 = or()
151 = and(149, 144, 150)
152 = and(141, 8)
153 = or(-152, 151)
154 = and(108, 127, 131, 136, 140, 148, 153)
# Player 1 (black) transition function for time step 2: 
# propagation constraints:
155 = or(-34, 36)
156 = or(-36, 34)
157 = and(155, 156)
158 = or(-35, 37)
159 = or(-37, 35)
160 = and(158, 159)
161 = and(157, 160)
# less than constraints for positive index bounds:
162 = and(20, -21)
163 = or(-20, 162)
# less than constraints for positive index bounds:
164 = and(22, -23)
165 = or(-22, 164)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
166 = or(-20, 26)
167 = or(-26, 20)
168 = and(166, 167)
169 = or(-21, 27)
170 = or(-27, 21)
171 = and(169, 170)
172 = and(168, 171)
# new y constraint equality gate with forall y variables: 
173 = or(-22, 28)
174 = or(-28, 22)
175 = and(173, 174)
176 = or(-23, 29)
177 = or(-29, 23)
178 = and(176, 177)
179 = and(175, 178)
180 = and(172, 179)
181 = or(-180, -34)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
182 = and(36, -37)
# if then constraint for black predicate:
183 = or(-180, 182)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
184 = or(180, 161)
# conjunction for all the then constraints:
185 = and(163, 165, 181, 183, 184)
# final if then constraint for current action:
186 = or(19, 185)
# Black win false
# Kommentar
187 = or(19, -25)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '3'] add/sub/none:
# computing y variables for constraints,['1', '3'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
188 = and(34, -35)
# if then constraint for black predicate:
189 = or(-73, 188)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
190 = or(-77, 142)
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
191 = or(-82, 142)
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
192 = or(-84, 188)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
193 = or(-180, 25)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
194 = and(163, 165, 189, 190, 191, 192, 193, 184)
# final if then constraint for current action:
195 = or(-19, 194)
# Black win true
# Kommentar
196 = or(-19, 25)
197 = and(186, 187, 195, 196)
# ------------------------------------------------------------------------
# Initial state: 
198 = and(26, -27)
199 = and(198, 76)
200 = and(71, 81)
# Or for all black forall position clauses: 
201 = or(199, 200)
# if black condition is true then first time step occupied and color black (i.e. 0): 
202 = or(-201, 74)
203 = and(198, 81)
# Or for all white forall position clauses: 
204 = or(203, 84)
# if white condition is true then first time step occupied and color white (i.e. 1): 
205 = or(-204, 78)
# for all other branches the occupied is 0: 
206 = or(201, 204)
207 = or(206, -30)
208 = and(202, 205, 207)
# ------------------------------------------------------------------------
# Goal state: 
# Black goal constraints: 
# And gate for black goal constraints, at index 3
# ------------------------------------------------------------------------
# White goal constraints: 
# And gate for white goal constraints, at index 3
# ------------------------------------------------------------------------
# Nested gates: 
209 = or(150, 25)
210 = and(197, 209)
# white valid constraints at reverse index: 1
211 = and(141, -17)
212 = or(-211, 210)
# propagating to the last: 
213 = and(141, 17)
214 = and(161, 145)
215 = or(-213, 214)
216 = and(154, 212, 215)
# black imply constraints at reverse index: 0
217 = or(6, 216)
218 = or(-32, 36)
219 = or(-36, 32)
220 = and(218, 219)
221 = or(-33, 37)
222 = or(-37, 33)
223 = and(221, 222)
224 = and(220, 223)
225 = and(224, 150, 7)
226 = or(-6, 225)
227 = and(90, 217, 226)
# ------------------------------------------------------------------------
# Final gate: 
# Conjunction of Initial gate and nested output gate: 
228 = and(208, 227)
