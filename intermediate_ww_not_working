# 1/1 (black/white) Action variables, 2 and 2 (action parameter) index variables (x, y), and game stop variables : 
exists(1, 2, 3, 4, 5, 6)
# There exists winning variables for black
exists(7)
# Number of actions/moves are only 1 - existential white move
forall(8, 9, 10, 11, 12, 17)
# white illegal variable: 
exists(13)
# indicator variables, specifying which position is voilated in illegal move: 
exists(14, 15, 16)
# white win variable
exists(18)
exists(19, 20, 21, 22, 23, 24)
# There exists winning variables for black
exists(25)
# black goal index variables: 
# white goal index and conjunction variables: 
# Forall index variables: 
forall(26, 27, 28, 29)
# Predicate variables: 
exists(30, 31)
exists(32, 33)
exists(34, 35)
exists(36, 37)
output(230)
# ------------------------------------------------------------------------
# Transitions: 
# Player 1 (black) transition function for time step 0: 
# propagation constraints:
38 = or(-30, 32)
39 = or(-32, 30)
40 = and(38, 39)
41 = or(-31, 33)
42 = or(-33, 31)
43 = and(41, 42)
44 = and(40, 43)
# less than constraints for positive index bounds:
45 = and(2, -3)
46 = or(-2, 45)
# less than constraints for positive index bounds:
47 = and(4, -5)
48 = or(-4, 47)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
49 = or(-2, 26)
50 = or(-26, 2)
51 = and(49, 50)
52 = or(-3, 27)
53 = or(-27, 3)
54 = and(52, 53)
55 = and(51, 54)
# new y constraint equality gate with forall y variables: 
56 = or(-4, 28)
57 = or(-28, 4)
58 = and(56, 57)
59 = or(-5, 29)
60 = or(-29, 5)
61 = and(59, 60)
62 = and(58, 61)
63 = and(55, 62)
64 = or(-63, -30)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
65 = and(32, -33)
# if then constraint for black predicate:
66 = or(-63, 65)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
67 = or(63, 44)
# conjunction for all the then constraints:
68 = and(46, 48, 64, 66, 67)
# final if then constraint for current action:
69 = or(1, 68)
# Black win false
# Black kommentar
70 = or(1, -7)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['0', '2'] add/sub/none:
# computing y variables for constraints,['0', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
71 = and(26, 27)
# y constraint binary format with forall y variables: 
72 = and(-28, 29)
73 = and(71, 72)
74 = and(30, -31)
# if then constraint for black predicate:
75 = or(-73, 74)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
76 = and(-26, -27)
# y constraint binary format with forall y variables: 
77 = and(76, 72)
78 = and(30, 31)
# if then constraint for white predicate:
79 = or(-77, 78)
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
80 = and(-26, 27)
# y constraint binary format with forall y variables: 
81 = and(-28, -29)
82 = and(80, 81)
# if then constraint for white predicate:
83 = or(-82, 78)
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
84 = and(80, 72)
# if then constraint for black predicate:
85 = or(-84, 74)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
86 = or(-63, 7)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
87 = and(46, 48, 75, 79, 83, 85, 86, 67)
# final if then constraint for current action:
88 = or(-1, 87)
# Black win true
# Black kommentar
89 = or(-1, 7)
90 = and(69, 70, 88, 89)
# Player 2 (white) transition function for time step 1: 
# propagation constraints:
91 = or(-32, 34)
92 = or(-34, 32)
93 = and(91, 92)
94 = or(-33, 35)
95 = or(-35, 33)
96 = and(94, 95)
97 = and(93, 96)
# generating less than bounds for indexes:
# less than constraints for positive index bounds:
98 = and(9, -10)
99 = or(-9, 98)
# less than constraints for positive index bounds:
100 = and(11, -12)
101 = or(-11, 100)
102 = and(99, 101)
103 = or(8, 102)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
104 = or(-8, 102)
# conjunction for all the bound constraints:
105 = and(103, 104)
# single equality gate for the bound boolean variale and the final bound conjuction gate:
106 = or(-13, 105)
107 = or(-105, 13)
108 = and(106, 107)
# generating precondition equalities with boolean variables:
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
109 = or(-9, 26)
110 = or(-26, 9)
111 = and(109, 110)
112 = or(-10, 27)
113 = or(-27, 10)
114 = and(112, 113)
115 = and(111, 114)
# new y constraint equality gate with forall y variables: 
116 = or(-11, 28)
117 = or(-28, 11)
118 = and(116, 117)
119 = or(-12, 29)
120 = or(-29, 12)
121 = and(119, 120)
122 = and(118, 121)
123 = and(115, 122)
124 = or(32, 14)
125 = or(-14, -32)
126 = and(124, 125)
127 = or(8, -123, 126)
# computing x variables for constraints,['3', '1'] add/sub/none:
# computing y variables for constraints,['3', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
128 = and(26, -27)
# y constraint binary format with forall y variables: 
129 = and(128, 81)
130 = and(32, 33)
# if then constraint for white predicate:
131 = or(-130, 14)
132 = or(-14, 130)
133 = and(131, 132)
134 = or(-8, -129, 133)
# computing x variables for constraints,['3', '2'] add/sub/none:
# computing y variables for constraints,['3', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
135 = and(128, 72)
# if then constraint for black predicate:
136 = or(-65, 15)
137 = or(-15, 65)
138 = and(136, 137)
139 = or(-8, -135, 138)
# computing x variables for constraints,['2', '3'] add/sub/none:
# computing y variables for constraints,['2', '3'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
140 = and(28, -29)
141 = and(80, 140)
# if then constraint for black predicate:
142 = or(-65, 16)
143 = or(-16, 65)
144 = and(142, 143)
145 = or(-8, -141, 144)
# generating effects, implcation when the game is not stopped and bounds,preconditions hold:
146 = and(13, 14, 15, 16)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
147 = and(34, 35)
# if then constraint for white predicate:
148 = or(-123, 147)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
149 = or(123, 97)
150 = and(148, 149)
151 = and(146, -8)
152 = or(-151, 150)
# White win false
# White kommentar
153 = or(8, -18)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# WW variable
154 = or(-123, 123)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
155 = and(154, 149)
156 = and(146, 8)
157 = or(-156, 155)
# White win true
# White kommentar
158 = or(-8, 18)
159 = and(108, 127, 134, 139, 145, 152, 153, 157, 158)
# Player 1 (black) transition function for time step 2: 
# propagation constraints:
160 = or(-34, 36)
161 = or(-36, 34)
162 = and(160, 161)
163 = or(-35, 37)
164 = or(-37, 35)
165 = and(163, 164)
166 = and(162, 165)
# less than constraints for positive index bounds:
167 = and(20, -21)
168 = or(-20, 167)
# less than constraints for positive index bounds:
169 = and(22, -23)
170 = or(-22, 169)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
171 = or(-20, 26)
172 = or(-26, 20)
173 = and(171, 172)
174 = or(-21, 27)
175 = or(-27, 21)
176 = and(174, 175)
177 = and(173, 176)
# new y constraint equality gate with forall y variables: 
178 = or(-22, 28)
179 = or(-28, 22)
180 = and(178, 179)
181 = or(-23, 29)
182 = or(-29, 23)
183 = and(181, 182)
184 = and(180, 183)
185 = and(177, 184)
186 = or(-185, -34)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
187 = and(36, -37)
# if then constraint for black predicate:
188 = or(-185, 187)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
189 = or(185, 166)
# conjunction for all the then constraints:
190 = and(168, 170, 186, 188, 189)
# final if then constraint for current action:
191 = or(19, 190)
# Black win false
# Black kommentar
192 = or(19, -25)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['0', '2'] add/sub/none:
# computing y variables for constraints,['0', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
193 = and(34, -35)
# if then constraint for black predicate:
194 = or(-73, 193)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
195 = or(-77, 147)
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
196 = or(-82, 147)
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
197 = or(-84, 193)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
198 = or(-185, 25)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
199 = and(168, 170, 194, 195, 196, 197, 198, 189)
# final if then constraint for current action:
200 = or(-19, 199)
# Black win true
# Black kommentar
201 = or(-19, 25)
202 = and(191, 192, 200, 201)
# ------------------------------------------------------------------------
# Initial state: 
# Or for all black forall position clauses: 
# if black condition is true then first time step occupied and color black (i.e. 0): 
203 = or(-135, 74)
# Or for all white forall position clauses: 
# if white condition is true then first time step occupied and color white (i.e. 1): 
204 = or(-129, 78)
# for all other branches the occupied is 0: 
205 = or(135, 129)
206 = or(205, -30)
207 = and(203, 204, 206)
# ------------------------------------------------------------------------
# Goal state: 
# Black goal constraints: 
208 = or()
# And gate for black goal constraints, at index 3
# ------------------------------------------------------------------------
# White goal constraints: 
# And gate for white goal constraints, at index 3
209 = and()
# ------------------------------------------------------------------------
# Nested gates: 
210 = or(208, 25)
211 = and(202, 210)
# white valid constraints at reverse index: 1
212 = and(146, -17)
213 = or(-212, 211)
# propagating to the last: 
214 = and(146, 17)
215 = and(166, 209)
216 = or(-214, 215)
217 = and(159, 213, 216)
# black imply constraints at reverse index: 0
218 = or(6, 217)
219 = or(-32, 36)
220 = or(-36, 32)
221 = and(219, 220)
222 = or(-33, 37)
223 = or(-37, 33)
224 = and(222, 223)
225 = and(221, 224)
226 = and(225, 208)
227 = or(226, 7)
228 = or(-6, 227)
229 = and(90, 218, 228)
# ------------------------------------------------------------------------
# Final gate: 
# Conjunction of Initial gate and nested output gate: 
230 = and(207, 229)
