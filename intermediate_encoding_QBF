# 3/1 (black/white) Action variables, 2 and 2 (action parameter) index variables (x, y), and game stop variables : 
exists(1, 2, 3, 4, 5, 6, 7, 8)
# There exists winning variables for black
exists(9)
# Number of actions/moves are only 1 - existential white move
exists(10)
forall(11, 12, 13, 14)
# white illegal variable: 
exists(15)
# indicator variables, specifying which position is voilated in illegal move: 
exists(16)
exists(18, 19, 20, 21, 22, 23, 24, 25)
# There exists winning variables for black
exists(26)
# black goal index variables: 
# white goal index and conjunction variables: 
# Forall index variables: 
forall(27, 28, 29, 30)
# Predicate variables: 
exists(31, 32)
exists(33, 34)
exists(35, 36)
exists(37, 38)
output(263)
# ------------------------------------------------------------------------
# Transitions: 
# Player 1 (black) transition function for time step 0: 
# less than constraints for black moves:
39 = and(1, -2)
40 = and(1, 2, -3)
41 = or(-1, 39, 40)
# propagation constraints:
42 = or(-31, 33)
43 = or(-33, 31)
44 = and(42, 43)
45 = or(-32, 34)
46 = or(-34, 32)
47 = and(45, 46)
48 = and(44, 47)
49 = and(-1, -2, -3)
# less than constraints for positive index bounds:
50 = and(4, -5)
51 = or(-4, 50)
# less than constraints for positive index bounds:
52 = and(6, -7)
53 = or(-6, 52)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
54 = or(-4, 27)
55 = or(-27, 4)
56 = and(54, 55)
57 = or(-5, 28)
58 = or(-28, 5)
59 = and(57, 58)
60 = and(56, 59)
# new y constraint equality gate with forall y variables: 
61 = or(-6, 29)
62 = or(-29, 6)
63 = and(61, 62)
64 = or(-7, 30)
65 = or(-30, 7)
66 = and(64, 65)
67 = and(63, 66)
68 = and(60, 67)
69 = or(-68, -31)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
70 = and(33, -34)
# if then constraint for black predicate:
71 = or(-68, 70)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
72 = or(68, 48)
# conjunction for all the then constraints:
73 = and(51, 53, 69, 71, 72)
# final if then constraint for current action:
74 = or(-49, 73)
# Black win false
# Kommentar
75 = or(-49, -9)
76 = and(-1, -2, 3)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['2', '0'] add/sub/none:
# computing y variables for constraints,['2', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
77 = and(-27, 28)
# y constraint binary format with forall y variables: 
78 = and(29, 30)
79 = and(77, 78)
80 = and(31, 32)
# if then constraint for white predicate:
81 = or(-79, 80)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
82 = and(-27, -28)
# y constraint binary format with forall y variables: 
83 = and(-29, 30)
84 = and(82, 83)
85 = and(31, -32)
# if then constraint for black predicate:
86 = or(-84, 85)
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
87 = and(77, 83)
# if then constraint for white predicate:
88 = or(-87, 80)
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
89 = and(-29, -30)
90 = and(77, 89)
# if then constraint for black predicate:
91 = or(-90, 85)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
92 = or(-68, 9)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
93 = and(51, 53, 81, 86, 88, 91, 92, 72)
# final if then constraint for current action:
94 = or(-76, 93)
# Black win true
# Kommentar
95 = or(-76, 9)
96 = and(-1, 2, -3)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['1', '1'] add/sub/none:
# computing y variables for constraints,['1', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
97 = and(82, 89)
# if then constraint for white predicate:
98 = or(-97, 80)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
99 = and(51, 53, 86, 88, 91, 98, 92, 72)
# final if then constraint for current action:
100 = or(-96, 99)
# Black win true
# Kommentar
101 = or(-96, 9)
102 = and(-1, 2, 3)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '0'] add/sub/none:
# computing y variables for constraints,['1', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
103 = and(82, 78)
# if then constraint for white predicate:
104 = or(-103, 80)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
105 = and(51, 53, 104, 86, 88, 91, 92, 72)
# final if then constraint for current action:
106 = or(-102, 105)
# Black win true
# Kommentar
107 = or(-102, 9)
108 = and(1, -2, -3)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['0', '2'] add/sub/none:
# computing y variables for constraints,['0', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
109 = and(27, 28)
# y constraint binary format with forall y variables: 
110 = and(109, 83)
# if then constraint for white predicate:
111 = or(-110, 80)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
112 = and(51, 53, 86, 88, 91, 111, 92, 72)
# final if then constraint for current action:
113 = or(-108, 112)
# Black win true
# Kommentar
114 = or(-108, 9)
115 = and(1, -2, 3)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['0', '1'] add/sub/none:
# computing y variables for constraints,['0', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
116 = and(109, 89)
# if then constraint for white predicate:
117 = or(-116, 80)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
118 = and(51, 53, 86, 88, 91, 117, 92, 72)
# final if then constraint for current action:
119 = or(-115, 118)
# Black win true
# Kommentar
120 = or(-115, 9)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['0', '0'] add/sub/none:
# computing y variables for constraints,['0', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
121 = and(109, 78)
# if then constraint for white predicate:
122 = or(-121, 80)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
123 = and(51, 53, 86, 88, 91, 122, 92, 72)
# final if then constraint for current action:
124 = or(-40, 123)
# Black win true
# Kommentar
125 = or(-40, 9)
126 = and(41, 74, 75, 94, 95, 100, 101, 106, 107, 113, 114, 119, 120, 124, 125)
# Player 2 (white) transition function for time step 1: 
# propagation constraints:
127 = or(-33, 35)
128 = or(-35, 33)
129 = and(127, 128)
130 = or(-34, 36)
131 = or(-36, 34)
132 = and(130, 131)
133 = and(129, 132)
# less than constraints for white moves:
# generating less than bounds for indexes:
# less than constraints for positive index bounds:
134 = and(11, -12)
135 = or(-11, 134)
# less than constraints for positive index bounds:
136 = and(13, -14)
137 = or(-13, 136)
138 = and(135, 137)
139 = or(10, 138)
# conjunction for all the bound constraints:
140 = and(-10, 139)
# single equality gate for the bound boolean variale and the final bound conjuction gate:
141 = or(-15, 140)
142 = or(-140, 15)
143 = and(141, 142)
# generating precondition equalities with boolean variables:
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
144 = or(-11, 27)
145 = or(-27, 11)
146 = and(144, 145)
147 = or(-12, 28)
148 = or(-28, 12)
149 = and(147, 148)
150 = and(146, 149)
# new y constraint equality gate with forall y variables: 
151 = or(-13, 29)
152 = or(-29, 13)
153 = and(151, 152)
154 = or(-14, 30)
155 = or(-30, 14)
156 = and(154, 155)
157 = and(153, 156)
158 = and(150, 157)
159 = or(33, 16)
160 = or(-16, -33)
161 = and(159, 160)
162 = or(10, -158, 161)
# generating effects, implcation when the game is not stopped and bounds,preconditions hold:
163 = and(15, 16)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
164 = and(35, 36)
# if then constraint for white predicate:
165 = or(-158, 164)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
166 = or(158, 133)
167 = and(165, 166)
168 = and(163, -10)
169 = or(-168, 167)
170 = and(143, 162, 169, -10)
# Player 1 (black) transition function for time step 2: 
# less than constraints for black moves:
171 = and(18, -19)
172 = and(18, 19, -20)
173 = or(-18, 171, 172)
# propagation constraints:
174 = or(-35, 37)
175 = or(-37, 35)
176 = and(174, 175)
177 = or(-36, 38)
178 = or(-38, 36)
179 = and(177, 178)
180 = and(176, 179)
181 = and(-18, -19, -20)
# less than constraints for positive index bounds:
182 = and(21, -22)
183 = or(-21, 182)
# less than constraints for positive index bounds:
184 = and(23, -24)
185 = or(-23, 184)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
186 = or(-21, 27)
187 = or(-27, 21)
188 = and(186, 187)
189 = or(-22, 28)
190 = or(-28, 22)
191 = and(189, 190)
192 = and(188, 191)
# new y constraint equality gate with forall y variables: 
193 = or(-23, 29)
194 = or(-29, 23)
195 = and(193, 194)
196 = or(-24, 30)
197 = or(-30, 24)
198 = and(196, 197)
199 = and(195, 198)
200 = and(192, 199)
201 = or(-200, -35)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
202 = and(37, -38)
# if then constraint for black predicate:
203 = or(-200, 202)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
204 = or(200, 180)
# conjunction for all the then constraints:
205 = and(183, 185, 201, 203, 204)
# final if then constraint for current action:
206 = or(-181, 205)
# Black win false
# Kommentar
207 = or(-181, -26)
208 = and(-18, -19, 20)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['2', '0'] add/sub/none:
# computing y variables for constraints,['2', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
209 = or(-79, 164)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
210 = and(35, -36)
# if then constraint for black predicate:
211 = or(-84, 210)
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
212 = or(-87, 164)
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
213 = or(-90, 210)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
214 = or(-200, 26)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
215 = and(183, 185, 209, 211, 212, 213, 214, 204)
# final if then constraint for current action:
216 = or(-208, 215)
# Black win true
# Kommentar
217 = or(-208, 26)
218 = and(-18, 19, -20)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['1', '1'] add/sub/none:
# computing y variables for constraints,['1', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
219 = or(-97, 164)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
220 = and(183, 185, 211, 212, 213, 219, 214, 204)
# final if then constraint for current action:
221 = or(-218, 220)
# Black win true
# Kommentar
222 = or(-218, 26)
223 = and(-18, 19, 20)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '0'] add/sub/none:
# computing y variables for constraints,['1', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
224 = or(-103, 164)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
225 = and(183, 185, 224, 211, 212, 213, 214, 204)
# final if then constraint for current action:
226 = or(-223, 225)
# Black win true
# Kommentar
227 = or(-223, 26)
228 = and(18, -19, -20)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['0', '2'] add/sub/none:
# computing y variables for constraints,['0', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
229 = or(-110, 164)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
230 = and(183, 185, 211, 212, 213, 229, 214, 204)
# final if then constraint for current action:
231 = or(-228, 230)
# Black win true
# Kommentar
232 = or(-228, 26)
233 = and(18, -19, 20)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['0', '1'] add/sub/none:
# computing y variables for constraints,['0', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
234 = or(-116, 164)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
235 = and(183, 185, 211, 212, 213, 234, 214, 204)
# final if then constraint for current action:
236 = or(-233, 235)
# Black win true
# Kommentar
237 = or(-233, 26)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
# computing x variables for constraints,['0', '0'] add/sub/none:
# computing y variables for constraints,['0', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
238 = or(-121, 164)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
239 = and(183, 185, 211, 212, 213, 238, 214, 204)
# final if then constraint for current action:
240 = or(-172, 239)
# Black win true
# Kommentar
241 = or(-172, 26)
242 = and(173, 206, 207, 216, 217, 221, 222, 226, 227, 231, 232, 236, 237, 240, 241)
# ------------------------------------------------------------------------
# Initial state: 
# Or for all black forall position clauses: 
# if black condition is true then first time step occupied and color black (i.e. 0): 
# Or for all white forall position clauses: 
# if white condition is true then first time step occupied and color white (i.e. 1): 
# for all other branches the occupied is 0: 
243 = or(90, 87)
244 = or(243, -31)
245 = and(91, 88, 244)
# ------------------------------------------------------------------------
# Goal state: 
# Black goal constraints: 
246 = or()
# And gate for black goal constraints, at index 3
# And gate for white goal constraints, at index 3
247 = and()
# forcing single index maps to 1: 
# ------------------------------------------------------------------------
# Nested gates: 
248 = or(246, 26)
249 = and(242, 248)
# white valid constraints at reverse index: 1
250 = or(-163, 249)
251 = and(170, 250)
# black imply constraints at reverse index: 0
252 = or(8, 251)
253 = or(-33, 37)
254 = or(-37, 33)
255 = and(253, 254)
256 = or(-34, 38)
257 = or(-38, 34)
258 = and(256, 257)
259 = and(255, 258)
260 = and(259, 246, 9)
261 = or(-8, 260)
262 = and(126, 252, 261)
# ------------------------------------------------------------------------
# Final gate: 
# Conjunction of Initial gate, forced gate and nested output gate: 
263 = and(245, -10, 262)
