# 1/1 (black/white) Action variables, 2 and 2 (action parameter) index variables (x, y), and game stop variables : 
exists(1, 2, 3, 4, 5, 6)
# There exists winning variables for black
exists(7)
exists(8)
forall(9, 10, 11, 12)
# white illegal variable: 
exists(13)
# indicator variables, specifying which position is voilated in illegal move: 
exists(14, 15, 16)
exists(18, 19, 20, 21, 22, 23)
# There exists winning variables for black
exists(24)
# black goal index variables: 
# white goal index and conjunction variables: 
# Forall index variables: 
forall(25, 26, 27, 28)
# Predicate variables: 
exists(29, 30)
exists(31, 32)
exists(33, 34)
exists(35, 36)
output(234)
# ------------------------------------------------------------------------
# Transitions: 
# Player 1 (black) transition function for time step 0: 
# propagation constraints:
37 = or(-29, 31)
38 = or(-31, 29)
39 = and(37, 38)
40 = or(-30, 32)
41 = or(-32, 30)
42 = and(40, 41)
43 = and(39, 42)
# less than constraints for positive index bounds:
44 = and(2, -3)
45 = or(-2, 44)
# less than constraints for positive index bounds:
46 = and(4, -5)
47 = or(-4, 46)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
48 = or(-2, 25)
49 = or(-25, 2)
50 = and(48, 49)
51 = or(-3, 26)
52 = or(-26, 3)
53 = and(51, 52)
54 = and(50, 53)
# new y constraint equality gate with forall y variables: 
55 = or(-4, 27)
56 = or(-27, 4)
57 = and(55, 56)
58 = or(-5, 28)
59 = or(-28, 5)
60 = and(58, 59)
61 = and(57, 60)
62 = and(54, 61)
63 = or(-62, -29)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
64 = and(29, 30)
# if then constraint for white predicate:
65 = or(-62, -64)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
66 = and(29, -30)
# if then constraint for black predicate:
67 = or(-62, -66)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
68 = and(31, -32)
# if then constraint for black predicate:
69 = or(-62, 68)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
70 = or(62, 43)
# conjunction for all the then constraints:
71 = and(45, 47, 63, 65, 67, 69, 70)
# final if then constraint for current action:
72 = or(1, 71)
# Black win false
# Kommentar
73 = or(1, -7)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['0', '0'] add/sub/none:
# computing y variables for constraints,['0', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
74 = and(25, 26)
# y constraint binary format with forall y variables: 
75 = and(27, 28)
76 = and(74, 75)
77 = or(-76, -29)
# computing x variables for constraints,['0', '1'] add/sub/none:
# computing y variables for constraints,['0', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
78 = and(-27, -28)
79 = and(74, 78)
80 = or(-79, -29)
# computing x variables for constraints,['0', '2'] add/sub/none:
# computing y variables for constraints,['0', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
81 = and(-27, 28)
82 = and(74, 81)
83 = or(-82, -29)
# computing x variables for constraints,['1', '0'] add/sub/none:
# computing y variables for constraints,['1', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
84 = and(-25, -26)
# y constraint binary format with forall y variables: 
85 = and(84, 75)
86 = or(-85, -29)
# computing x variables for constraints,['1', '1'] add/sub/none:
# computing y variables for constraints,['1', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
87 = and(84, 78)
88 = or(-87, -29)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
89 = and(84, 81)
# if then constraint for black predicate:
90 = or(-89, 66)
# computing x variables for constraints,['2', '0'] add/sub/none:
# computing y variables for constraints,['2', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
91 = and(-25, 26)
# y constraint binary format with forall y variables: 
92 = and(91, 75)
# if then constraint for white predicate:
93 = or(-92, 64)
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
94 = and(91, 78)
# if then constraint for black predicate:
95 = or(-94, 66)
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
96 = and(91, 81)
# if then constraint for white predicate:
97 = or(-96, 64)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
98 = or(-62, 7)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
99 = and(45, 47, 77, 80, 83, 86, 88, 90, 93, 95, 97, 98, 70)
# final if then constraint for current action:
100 = or(-1, 99)
# Black win true
# Kommentar
101 = or(-1, 7)
102 = and(72, 73, 100, 101)
# Player 2 (white) transition function for time step 1: 
# propagation constraints:
103 = or(-31, 33)
104 = or(-33, 31)
105 = and(103, 104)
106 = or(-32, 34)
107 = or(-34, 32)
108 = and(106, 107)
109 = and(105, 108)
# less than constraints for white moves:
# generating less than bounds for indexes:
# less than constraints for positive index bounds:
110 = and(9, -10)
111 = or(-9, 110)
# less than constraints for positive index bounds:
112 = and(11, -12)
113 = or(-11, 112)
114 = and(111, 113)
115 = or(8, 114)
# conjunction for all the bound constraints:
116 = and(-8, 115)
# single equality gate for the bound boolean variale and the final bound conjuction gate:
117 = or(-13, 116)
118 = or(-116, 13)
119 = and(117, 118)
# generating precondition equalities with boolean variables:
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
120 = or(-9, 25)
121 = or(-25, 9)
122 = and(120, 121)
123 = or(-10, 26)
124 = or(-26, 10)
125 = and(123, 124)
126 = and(122, 125)
# new y constraint equality gate with forall y variables: 
127 = or(-11, 27)
128 = or(-27, 11)
129 = and(127, 128)
130 = or(-12, 28)
131 = or(-28, 12)
132 = and(130, 131)
133 = and(129, 132)
134 = and(126, 133)
135 = or(31, 14)
136 = or(-14, -31)
137 = and(135, 136)
138 = or(8, -134, 137)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
139 = and(31, 32)
# if then constraint for white predicate:
140 = or(139, 15)
141 = or(-15, -139)
142 = and(140, 141)
143 = or(8, -134, 142)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# if then constraint for black predicate:
144 = or(68, 16)
145 = or(-16, -68)
146 = and(144, 145)
147 = or(8, -134, 146)
# generating effects, implcation when the game is not stopped and bounds,preconditions hold:
148 = and(13, 14, 15, 16)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
149 = and(33, 34)
# if then constraint for white predicate:
150 = or(-134, 149)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
151 = or(134, 109)
152 = and(150, 151)
153 = and(148, -8)
154 = or(-153, 152)
155 = and(119, 138, 143, 147, 154, -8)
# Player 1 (black) transition function for time step 2: 
# propagation constraints:
156 = or(-33, 35)
157 = or(-35, 33)
158 = and(156, 157)
159 = or(-34, 36)
160 = or(-36, 34)
161 = and(159, 160)
162 = and(158, 161)
# less than constraints for positive index bounds:
163 = and(19, -20)
164 = or(-19, 163)
# less than constraints for positive index bounds:
165 = and(21, -22)
166 = or(-21, 165)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
167 = or(-19, 25)
168 = or(-25, 19)
169 = and(167, 168)
170 = or(-20, 26)
171 = or(-26, 20)
172 = and(170, 171)
173 = and(169, 172)
# new y constraint equality gate with forall y variables: 
174 = or(-21, 27)
175 = or(-27, 21)
176 = and(174, 175)
177 = or(-22, 28)
178 = or(-28, 22)
179 = and(177, 178)
180 = and(176, 179)
181 = and(173, 180)
182 = or(-181, -33)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# if then constraint for white predicate:
183 = or(-181, -149)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
184 = and(33, -34)
# if then constraint for black predicate:
185 = or(-181, -184)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
186 = and(35, -36)
# if then constraint for black predicate:
187 = or(-181, 186)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
188 = or(181, 162)
# conjunction for all the then constraints:
189 = and(164, 166, 182, 183, 185, 187, 188)
# final if then constraint for current action:
190 = or(18, 189)
# Black win false
# Kommentar
191 = or(18, -24)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['0', '0'] add/sub/none:
# computing y variables for constraints,['0', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
192 = or(-76, -33)
# computing x variables for constraints,['0', '1'] add/sub/none:
# computing y variables for constraints,['0', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
193 = or(-79, -33)
# computing x variables for constraints,['0', '2'] add/sub/none:
# computing y variables for constraints,['0', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
194 = or(-82, -33)
# computing x variables for constraints,['1', '0'] add/sub/none:
# computing y variables for constraints,['1', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
195 = or(-85, -33)
# computing x variables for constraints,['1', '1'] add/sub/none:
# computing y variables for constraints,['1', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
196 = or(-87, -33)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
197 = or(-89, 184)
# computing x variables for constraints,['2', '0'] add/sub/none:
# computing y variables for constraints,['2', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
198 = or(-92, 149)
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
199 = or(-94, 184)
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
200 = or(-96, 149)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
201 = or(-181, 24)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# conjunction for all the then constraints:
202 = and(164, 166, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 188)
# final if then constraint for current action:
203 = or(-18, 202)
# Black win true
# Kommentar
204 = or(-18, 24)
205 = and(190, 191, 203, 204)
# ------------------------------------------------------------------------
# Initial state: 
# Or for all black forall position clauses: 
206 = or(89, 94)
# if black condition is true then first time step occupied and color black (i.e. 0): 
207 = or(-206, 66)
# Or for all white forall position clauses: 
208 = or(92, 96)
# if white condition is true then first time step occupied and color white (i.e. 1): 
209 = or(-208, 64)
# for all other branches the occupied is 0: 
210 = or(206, 208)
211 = or(210, -29)
212 = and(207, 209, 211)
# ------------------------------------------------------------------------
# Goal state: 
# Black goal constraints: 
213 = or()
# And gate for black goal constraints, at index 3
# And gate for white goal constraints, at index 3
214 = and()
# forcing single index maps to 1: 
# ------------------------------------------------------------------------
# Nested gates: 
215 = or(213, 24)
216 = and(205, 215)
# white valid constraints at reverse index: 1
217 = or(-148, 216)
218 = and(155, 217)
# black imply constraints at reverse index: 0
# Yippee
219 = and(218, -7)
220 = or(6, 219)
221 = or(-31, 35)
222 = or(-35, 31)
223 = and(221, 222)
224 = or(-32, 36)
225 = or(-36, 32)
226 = and(224, 225)
227 = and(223, 226)
228 = or(218, 7)
229 = or(6, 228)
230 = and(229, 213)
231 = or(-6, 230)
232 = and(102, 220, 231)
233 = or(232, 213, 7)
# ------------------------------------------------------------------------
# Final gate: 
# Conjunction of Initial gate, forced gate and nested output gate: 
234 = and(212, -8, 233)
