# 1/1 (black/white) Action variables, 2 and 2 (action parameter) index variables (x, y), and game stop variables : 
exists(1, 2, 3, 4, 5, 6)
# There exists winning variables for black
exists(7)
exists(8)
forall(9, 10, 11, 12)
# white illegal variable: 
exists(13)
# indicator variables, specifying which position is voilated in illegal move: 
exists(14, 15, 16)
exists(18, 19, 20, 21, 22, 23)
# There exists winning variables for black
exists(24)
# black goal index variables: 
# white goal index and conjunction variables: 
# Forall index variables: 
forall(25, 26, 27, 28)
# Predicate variables: 
exists(29, 30)
exists(31, 32)
exists(33, 34)
exists(35, 36)
output(230)
# ------------------------------------------------------------------------
# Transitions: 
# Player 1 (black) transition function for time step 0: 
# propagation constraints:
37 = or(-29, 31)
38 = or(-31, 29)
39 = and(37, 38)
40 = or(-30, 32)
41 = or(-32, 30)
42 = and(40, 41)
43 = and(39, 42)
# less than constraints for positive index bounds:
44 = and(2, -3)
45 = or(-2, 44)
# less than constraints for positive index bounds:
46 = and(4, -5)
47 = or(-4, 46)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
48 = or(-2, 25)
49 = or(-25, 2)
50 = and(48, 49)
51 = or(-3, 26)
52 = or(-26, 3)
53 = and(51, 52)
54 = and(50, 53)
# new y constraint equality gate with forall y variables: 
55 = or(-4, 27)
56 = or(-27, 4)
57 = and(55, 56)
58 = or(-5, 28)
59 = or(-28, 5)
60 = and(58, 59)
61 = and(57, 60)
62 = and(54, 61)
63 = or(-62, -29)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
64 = and(29, 30)
# if then constraint for white predicate:
65 = or(-62, -64)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
66 = and(29, -30)
# if then constraint for black predicate:
67 = or(-62, -66)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
68 = and(31, -32)
# if then constraint for black predicate:
69 = or(-62, 68)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
70 = or(62, 43)
# Black win false
# conjunction for all the then constraints:
71 = and(45, 47, 63, 65, 67, 69, 70, -7)
# final if then constraint for current action:
72 = or(1, 71)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['0', '0'] add/sub/none:
# computing y variables for constraints,['0', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
73 = and(25, 26)
# y constraint binary format with forall y variables: 
74 = and(27, 28)
75 = and(73, 74)
76 = or(-75, -29)
# computing x variables for constraints,['0', '1'] add/sub/none:
# computing y variables for constraints,['0', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
77 = and(-27, -28)
78 = and(73, 77)
79 = or(-78, -29)
# computing x variables for constraints,['0', '2'] add/sub/none:
# computing y variables for constraints,['0', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
80 = and(-27, 28)
81 = and(73, 80)
82 = or(-81, -29)
# computing x variables for constraints,['1', '0'] add/sub/none:
# computing y variables for constraints,['1', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
83 = and(-25, -26)
# y constraint binary format with forall y variables: 
84 = and(83, 74)
85 = or(-84, -29)
# computing x variables for constraints,['1', '1'] add/sub/none:
# computing y variables for constraints,['1', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
86 = and(83, 77)
87 = or(-86, -29)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
88 = and(83, 80)
# if then constraint for black predicate:
89 = or(-88, 66)
# computing x variables for constraints,['2', '0'] add/sub/none:
# computing y variables for constraints,['2', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
90 = and(-25, 26)
# y constraint binary format with forall y variables: 
91 = and(90, 74)
# if then constraint for white predicate:
92 = or(-91, 64)
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
93 = and(90, 77)
# if then constraint for black predicate:
94 = or(-93, 66)
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
95 = and(90, 80)
# if then constraint for white predicate:
96 = or(-95, 64)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
97 = or(-62, 7)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# Black win true
# conjunction for all the then constraints:
98 = and(45, 47, 76, 79, 82, 85, 87, 89, 92, 94, 96, 97, 70, 7)
# final if then constraint for current action:
99 = or(-1, 98)
100 = and(72, 99)
# Player 2 (white) transition function for time step 1: 
# propagation constraints:
101 = or(-31, 33)
102 = or(-33, 31)
103 = and(101, 102)
104 = or(-32, 34)
105 = or(-34, 32)
106 = and(104, 105)
107 = and(103, 106)
# less than constraints for white moves:
# generating less than bounds for indexes:
# less than constraints for positive index bounds:
108 = and(9, -10)
109 = or(-9, 108)
# less than constraints for positive index bounds:
110 = and(11, -12)
111 = or(-11, 110)
112 = and(109, 111)
113 = or(8, 112)
# conjunction for all the bound constraints:
114 = and(-8, 113)
# single equality gate for the bound boolean variale and the final bound conjuction gate:
115 = or(-13, 114)
116 = or(-114, 13)
117 = and(115, 116)
# generating precondition equalities with boolean variables:
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
118 = or(-9, 25)
119 = or(-25, 9)
120 = and(118, 119)
121 = or(-10, 26)
122 = or(-26, 10)
123 = and(121, 122)
124 = and(120, 123)
# new y constraint equality gate with forall y variables: 
125 = or(-11, 27)
126 = or(-27, 11)
127 = and(125, 126)
128 = or(-12, 28)
129 = or(-28, 12)
130 = and(128, 129)
131 = and(127, 130)
132 = and(124, 131)
133 = or(31, 14)
134 = or(-14, -31)
135 = and(133, 134)
136 = or(8, -132, 135)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
137 = and(31, 32)
# if then constraint for white predicate:
138 = or(137, 15)
139 = or(-15, -137)
140 = and(138, 139)
141 = or(8, -132, 140)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# if then constraint for black predicate:
142 = or(68, 16)
143 = or(-16, -68)
144 = and(142, 143)
145 = or(8, -132, 144)
# generating effects, implcation when the game is not stopped and bounds,preconditions hold:
146 = and(13, 14, 15, 16)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
147 = and(33, 34)
# if then constraint for white predicate:
148 = or(-132, 147)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
149 = or(132, 107)
150 = and(148, 149)
151 = and(146, -8)
152 = or(-151, 150)
153 = and(117, 136, 141, 145, 152, -8)
# Player 1 (black) transition function for time step 2: 
# propagation constraints:
154 = or(-33, 35)
155 = or(-35, 33)
156 = and(154, 155)
157 = or(-34, 36)
158 = or(-36, 34)
159 = and(157, 158)
160 = and(156, 159)
# less than constraints for positive index bounds:
161 = and(19, -20)
162 = or(-19, 161)
# less than constraints for positive index bounds:
163 = and(21, -22)
164 = or(-21, 163)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
165 = or(-19, 25)
166 = or(-25, 19)
167 = and(165, 166)
168 = or(-20, 26)
169 = or(-26, 20)
170 = and(168, 169)
171 = and(167, 170)
# new y constraint equality gate with forall y variables: 
172 = or(-21, 27)
173 = or(-27, 21)
174 = and(172, 173)
175 = or(-22, 28)
176 = or(-28, 22)
177 = and(175, 176)
178 = and(174, 177)
179 = and(171, 178)
180 = or(-179, -33)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# if then constraint for white predicate:
181 = or(-179, -147)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
182 = and(33, -34)
# if then constraint for black predicate:
183 = or(-179, -182)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
184 = and(35, -36)
# if then constraint for black predicate:
185 = or(-179, 184)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
186 = or(179, 160)
# Black win false
# conjunction for all the then constraints:
187 = and(162, 164, 180, 181, 183, 185, 186, -24)
# final if then constraint for current action:
188 = or(18, 187)
# less than constraints for positive index bounds:
# less than constraints for positive index bounds:
# computing x variables for constraints,['0', '0'] add/sub/none:
# computing y variables for constraints,['0', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
189 = or(-75, -33)
# computing x variables for constraints,['0', '1'] add/sub/none:
# computing y variables for constraints,['0', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
190 = or(-78, -33)
# computing x variables for constraints,['0', '2'] add/sub/none:
# computing y variables for constraints,['0', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
191 = or(-81, -33)
# computing x variables for constraints,['1', '0'] add/sub/none:
# computing y variables for constraints,['1', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
192 = or(-84, -33)
# computing x variables for constraints,['1', '1'] add/sub/none:
# computing y variables for constraints,['1', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
193 = or(-86, -33)
# computing x variables for constraints,['1', '2'] add/sub/none:
# computing y variables for constraints,['1', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
194 = or(-88, 182)
# computing x variables for constraints,['2', '0'] add/sub/none:
# computing y variables for constraints,['2', '0'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
195 = or(-91, 147)
# computing x variables for constraints,['2', '1'] add/sub/none:
# computing y variables for constraints,['2', '1'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for black predicate:
196 = or(-93, 182)
# computing x variables for constraints,['2', '2'] add/sub/none:
# computing y variables for constraints,['2', '2'] add/sub/none:
# x constraint binary format with forall x variables: 
# y constraint binary format with forall y variables: 
# if then constraint for white predicate:
197 = or(-95, 147)
# computing x variables for constraints,['?x', '?y'] add/sub/none:
# computing y variables for constraints,['?x', '?y'] add/sub/none:
# new x constraint equality gate with forall x variables: 
# new y constraint equality gate with forall y variables: 
# BW variable
198 = or(-179, 24)
# disjunction for all touched positions:
# frame axiom; if not touched position, then it is propagated:
# Black win true
# conjunction for all the then constraints:
199 = and(162, 164, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 186, 24)
# final if then constraint for current action:
200 = or(-18, 199)
201 = and(188, 200)
# ------------------------------------------------------------------------
# Initial state: 
# Or for all black forall position clauses: 
202 = or(88, 93)
# if black condition is true then first time step occupied and color black (i.e. 0): 
203 = or(-202, 66)
# Or for all white forall position clauses: 
204 = or(91, 95)
# if white condition is true then first time step occupied and color white (i.e. 1): 
205 = or(-204, 64)
# for all other branches the occupied is 0: 
206 = or(202, 204)
207 = or(206, -29)
208 = and(203, 205, 207)
# ------------------------------------------------------------------------
# Goal state: 
# Black goal constraints: 
209 = or()
# And gate for black goal constraints, at index 3
# And gate for white goal constraints, at index 3
210 = and()
# forcing single index maps to 1: 
# ------------------------------------------------------------------------
# Nested gates: 
211 = or(209, 24)
212 = and(201, 211)
# white valid constraints at reverse index: 1
213 = or(-146, 212)
214 = and(153, 213)
# black imply constraints at reverse index: 0
# Yippee
215 = and(214, -7)
216 = or(6, 215)
217 = or(-31, 35)
218 = or(-35, 31)
219 = and(217, 218)
220 = or(-32, 36)
221 = or(-36, 32)
222 = and(220, 221)
223 = and(219, 222)
224 = or(214, 7)
225 = or(6, 224)
226 = and(225, 209)
227 = or(-6, 226)
228 = and(100, 216, 227)
229 = or(228, 209, 7)
# ------------------------------------------------------------------------
# Final gate: 
# Conjunction of Initial gate, forced gate and nested output gate: 
230 = and(208, -8, 229)
