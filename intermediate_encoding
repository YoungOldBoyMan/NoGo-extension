# Move variables: 
exists(1, 2)
forall(3, 4)
exists(5, 6)
# goal path variables: 
exists(19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)
# Forall position variables: 
forall(7, 8, 9, 10)
# Predicate variables: 
exists(11, 12)
exists(13, 14)
exists(15, 16)
exists(17, 18)
# Exists neighbour variables: 
exists(35, 36, 37, 38)
output(236)
# ------------------------------------------------------------------------
# Transitions: 
# Player 1 (black) transition function for time step 0: 
# Equality gate for move and forall positional variables:
39 = or(-1, 9)
40 = or(-9, 1)
41 = and(39, 40)
42 = or(-2, 10)
43 = or(-10, 2)
44 = and(42, 43)
45 = and(-7, -8, 41, 44)
# Choosing black position constraints:
# In time step i, occupied must be false:
# In time step i+1, occupied must be true and color must be black (i.e., 0):
46 = and(-11, 13, -14)
# If time and equality constraints hold then choosing black constraints must be true:
47 = or(-45, 46)
# propagation constraints:
48 = or(-11, 13)
49 = or(-13, 11)
50 = and(48, 49)
51 = or(-12, 14)
52 = or(-14, 12)
53 = and(51, 52)
54 = and(50, 53)
# If the time and equality constraints does not hold predicates are propagated:
55 = or(45, 54)
# Player 2 (white) transition function for time step 1: 
# Equality gate for move and forall positional variables:
56 = or(-3, 9)
57 = or(-9, 3)
58 = and(56, 57)
59 = or(-4, 10)
60 = or(-10, 4)
61 = and(59, 60)
62 = and(-7, -8, 58, 61)
# In time step i, occupied must be false:
63 = and(62, -13)
# Choosing white position constraints:
# In time step i+1, occupied must be true and color must be white (i.e., 1):
64 = and(15, 16)
# If time and equality constraints hold then choosing white constraints must be true:
65 = or(-63, 64)
# propagation constraints:
66 = or(-13, 15)
67 = or(-15, 13)
68 = and(66, 67)
69 = or(-14, 16)
70 = or(-16, 14)
71 = and(69, 70)
72 = and(68, 71)
# If the time and equality constraints does not hold predicates are propagated:
73 = or(63, 72)
# Player 1 (black) transition function for time step 2: 
# Equality gate for move and forall positional variables:
74 = or(-5, 9)
75 = or(-9, 5)
76 = and(74, 75)
77 = or(-6, 10)
78 = or(-10, 6)
79 = and(77, 78)
80 = and(-7, -8, 76, 79)
# Choosing black position constraints:
# In time step i, occupied must be false:
# In time step i+1, occupied must be true and color must be black (i.e., 0):
81 = and(-15, 17, -18)
# If time and equality constraints hold then choosing black constraints must be true:
82 = or(-80, 81)
# propagation constraints:
83 = or(-15, 17)
84 = or(-17, 15)
85 = and(83, 84)
86 = or(-16, 18)
87 = or(-18, 16)
88 = and(86, 87)
89 = and(85, 88)
# If the time and equality constraints does not hold predicates are propagated:
90 = or(80, 89)
# Final transition gate: 
91 = and(47, 55, 65, 73, 82, 90)
# ------------------------------------------------------------------------
# Initial state: 
92 = and(-7, 8, -9, -10)
93 = and(-7, 8, -9, 10)
# Or for all black forall position clauses: 
94 = or(92, 93)
# if black condition is true then first time step occupied and color black (i.e. 0): 
95 = and(11, -12)
96 = or(-94, 95)
97 = and(-7, 8, 9, -10)
98 = and(-7, 8, 9, 10)
99 = and(7, -8, -9, -10)
# Or for all white forall position clauses: 
100 = or(97, 98, 99)
# if white condition is true then first time step occupied and color white (i.e. 1): 
101 = and(11, 12)
102 = or(-100, 101)
# for all other branches the occupied is 0: 
103 = or(94, 100)
104 = or(103, -11)
105 = and(96, 102, 104)
# ------------------------------------------------------------------------
# Goal state: 
# Specifying neighbours: 
106 = and(-7, -8, -9, -10)
# neighbour clauses: 
107 = and(-35, 36, -37, 38)
108 = and(-35, 36, -37, -38)
109 = and(-35, -36, -37, 38)
110 = and(-35, 36, 37, -38)
111 = or(107, 108, 109, 110)
# if then clause : 
112 = or(-106, 111)
113 = and(-7, -8, -9, 10)
# neighbour clauses: 
# if then clause : 
114 = or(-113, 109)
115 = and(-7, -8, 9, -10)
# neighbour clauses: 
116 = and(-35, -36, 37, -38)
# if then clause : 
117 = or(-115, 116)
118 = and(-7, -8, 9, 10)
# neighbour clauses: 
119 = and(-35, -36, 37, 38)
# if then clause : 
120 = or(-118, 119)
# neighbour clauses: 
121 = and(-35, -36, -37, -38)
122 = or(110, 121)
# if then clause : 
123 = or(-92, 122)
# neighbour clauses: 
124 = and(-35, 36, 37, 38)
125 = and(35, -36, -37, -38)
126 = or(121, 124, 110, 116, 109, 125)
# if then clause : 
127 = or(-93, 126)
# Constratins for position 0 :
# Equality clause for the current path variables and forall position variables: 
128 = or(-19, 7)
129 = or(-7, 19)
130 = and(128, 129)
131 = or(-20, 8)
132 = or(-8, 20)
133 = and(131, 132)
134 = or(-21, 9)
135 = or(-9, 21)
136 = and(134, 135)
137 = or(-22, 10)
138 = or(-10, 22)
139 = and(137, 138)
140 = and(130, 133, 136, 139)
# Equality clause for the neighbour path variables and neighbour variables: 
141 = or(-23, 35)
142 = or(-35, 23)
143 = and(141, 142)
144 = or(-24, 36)
145 = or(-36, 24)
146 = and(144, 145)
147 = or(-25, 37)
148 = or(-37, 25)
149 = and(147, 148)
150 = or(-26, 38)
151 = or(-38, 26)
152 = and(150, 151)
153 = and(143, 146, 149, 152)
154 = or(-140, 153)
# The goal position is occupied and the color is black: 
155 = and(17, -18)
# if then clause : 
156 = or(-140, 155)
# Constratins for position 1 :
# Equality clause for the current path variables and forall position variables: 
157 = or(-23, 7)
158 = or(-7, 23)
159 = and(157, 158)
160 = or(-24, 8)
161 = or(-8, 24)
162 = and(160, 161)
163 = or(-25, 9)
164 = or(-9, 25)
165 = and(163, 164)
166 = or(-26, 10)
167 = or(-10, 26)
168 = and(166, 167)
169 = and(159, 162, 165, 168)
# Equality clause for the neighbour path variables and neighbour variables: 
170 = or(-27, 35)
171 = or(-35, 27)
172 = and(170, 171)
173 = or(-28, 36)
174 = or(-36, 28)
175 = and(173, 174)
176 = or(-29, 37)
177 = or(-37, 29)
178 = and(176, 177)
179 = or(-30, 38)
180 = or(-38, 30)
181 = and(179, 180)
182 = and(172, 175, 178, 181)
183 = or(-169, 182)
# The goal position is occupied and the color is black: 
# if then clause : 
184 = or(-169, 155)
# Constratins for position 2 :
# Equality clause for the current path variables and forall position variables: 
185 = or(-27, 7)
186 = or(-7, 27)
187 = and(185, 186)
188 = or(-28, 8)
189 = or(-8, 28)
190 = and(188, 189)
191 = or(-29, 9)
192 = or(-9, 29)
193 = and(191, 192)
194 = or(-30, 10)
195 = or(-10, 30)
196 = and(194, 195)
197 = and(187, 190, 193, 196)
# Equality clause for the neighbour path variables and neighbour variables: 
198 = or(-31, 35)
199 = or(-35, 31)
200 = and(198, 199)
201 = or(-32, 36)
202 = or(-36, 32)
203 = and(201, 202)
204 = or(-33, 37)
205 = or(-37, 33)
206 = and(204, 205)
207 = or(-34, 38)
208 = or(-38, 34)
209 = and(207, 208)
210 = and(200, 203, 206, 209)
211 = or(-197, 210)
# The goal position is occupied and the color is black: 
# if then clause : 
212 = or(-197, 155)
# Constratins for position 3 :
# Equality clause for the current path variables and forall position variables: 
213 = or(-31, 7)
214 = or(-7, 31)
215 = and(213, 214)
216 = or(-32, 8)
217 = or(-8, 32)
218 = and(216, 217)
219 = or(-33, 9)
220 = or(-9, 33)
221 = and(219, 220)
222 = or(-34, 10)
223 = or(-10, 34)
224 = and(222, 223)
225 = and(215, 218, 221, 224)
# The goal position is occupied and the color is black: 
# if then clause : 
226 = or(-225, 155)
# Start boarder clauses : 
227 = and(-19, 20, -21, -22)
228 = and(-19, 20, 21, -22)
229 = and(19, -20, -21, -22)
# disjunction of all start boarder positions : 
230 = or(227, 228, 229)
# End boarder clauses : 
231 = and(-31, -32, -33, 34)
232 = and(-31, -32, 33, -34)
233 = and(-31, -32, 33, 34)
# disjunction of all end boarder positions : 
234 = or(231, 232, 233)
# Final and gate for goal constraints: 
235 = and(112, 114, 117, 120, 123, 127, 154, 156, 183, 184, 211, 212, 226, 230, 234)
# ------------------------------------------------------------------------
# Final gate: 
# Conjunction of Initial gate and Transition gate and Goal gate: 
236 = and(105, 91, 235)
